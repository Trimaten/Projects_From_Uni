<div class="w-full min-h-screen px-6 py-8 bg-gray-50">
  <% if @form.errors.any? %>
    <div id="error_explanation" class="mb-4 p-4 bg-red-100 border border-red-300 text-red-800 rounded">
      <h2><%= pluralize(@form.errors.count, "error") %> prohibited this form from being saved:</h2>
      <ul class="mt-2 list-disc pl-5">
        <% @form.errors.full_messages.each do |msg| %>
          <li><%= msg %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-2">
    <h1 class="text-5xl font-bold"><%= @form.title %></h1>
    <p class="text-xl text-gray-600">Workflow: <%= @workflow.title %></p>
  </div>

  <div class="flex space-x-6 min-h-[75vh] w-full mt-8">

    <div class="flex-1 bg-white p-8 rounded-2xl shadow-lg">
      <h2 class="text-2xl font-semibold mb-6">Form Editor</h2>

      <%= form_with model: [@workflow, @form], method: :patch, local: true, data: { turbo: false } do |f| %>
        <div class="mb-4">
          <%= f.label :title, class: "block text-sm font-medium text-gray-700" %>
          <%= f.text_field :title, class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm" %>
        </div>

        <div id="form-fields-container"> <%# Add an ID to the container of form fields for easier manipulation %>
          <%= f.fields_for :form_fields do |ff| %>
            <div class="border rounded-lg p-4 bg-gray-50 mb-4" data-formfield data-formfield-id="<%= ff.object.id %>"> <%# Add data-formfield-id %>
            <%= ff.hidden_field :position, class: "form-position" %>
              <div class="mb-2 flex items-start justify-between">
                <div class="w-full">
                  <%= ff.label :title, "Field Title", class: "block text-sm font-medium text-gray-700" %>
                  <%= ff.text_field :title, class: "mt-1 w-full rounded-md border-gray-300 shadow-sm" %>
                </div>

                <div class="ml-4 flex flex-col items-end space-y-1 text-sm pt-3">
                  <div class="flex space-x-2">
                    <button type="button" class="move-up text-gray-500 hover:text-gray-800" title="Move up">‚¨ÜÔ∏è</button>
                    <button type="button" class="move-down text-gray-500 hover:text-gray-800" title="Move down">‚¨áÔ∏è</button>
                    <button type="button" class="delete-field-btn text-red-600 hover:text-red-800" title="Delete Field"
                            data-workflow-id="<%= @workflow.id %>"
                            data-form-id="<%= @form.id %>"
                            data-formfield-id="<%= ff.object.id %>">üóëÔ∏è</button>
                  </div>

                  <label class="flex items-center space-x-1">
                    <%= ff.check_box :required %>
                    <span class="text-gray-600">Required</span>
                  </label>
                </div>
              </div>

              <div class="mb-2">
                <%= ff.label :typefield, "Type", class: "block text-sm font-medium text-gray-700" %>
                <%= ff.text_field :typefield, readonly: true, value: ff.object.typefield, data: { typefield: true }, class: "mt-1 w-full rounded-md border-gray-300 bg-gray-100" %>
              </div>

              <% allowed_types = %w[select checkbox radio] %>
              <% type = ff.object.typefield.to_s.downcase.strip %>
              <% contents = begin
                parsed = JSON.parse(ff.object.content || "[]")
                parsed.is_a?(Array) ? parsed : []
              rescue
                ff.object.content.to_s.split(",").map(&:strip).reject(&:blank?)
              end %>
              <% contents = [""] if contents.empty? && allowed_types.include?(type) %>

              <div class="mb-2" data-content-wrapper>
                <label class="block text-sm font-medium text-gray-700">Content:</label>
                <div data-content-fields>
                  <% contents.each do |value| %>
                    <% if allowed_types.include?(type) %>
                      <input name="<%= ff.object_name %>[content][]" type="text" value="<%= value %>" class="mt-1 mb-2 w-full rounded-md border-gray-300 shadow-sm content-input" />
                    <% else %>
                      <input type="text" value="<%= value %>" class="mt-1 mb-2 w-full rounded-md border-gray-200 bg-gray-100 text-gray-500 shadow-sm" readonly />
                    <% end %>
                  <% end %>
                </div>

                <% if allowed_types.include?(type) %>
                  <button type="button" class="add-content-btn mt-2 text-blue-600 hover:underline">+ Add Option</button>
                <% end %>
              </div>
            </div>
          <% end %>
        </div> <%# End of form-fields-container %>

        <div class="mt-6 text-right">
          <%= f.submit "Save Form & Exit to Workflow", name: 'commit', class: "bg-blue-500 text-white px-6 py-3 rounded-full hover:bg-blue-600" %>
        </div>
      <% end %>
    </div>

    <% example_texts = {
      "text" => content_tag(:div) do
        content_tag(:strong, "Text Title:") +
        text_field_tag("preview", "", placeholder: "John Doe", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "number" => content_tag(:div) do
        content_tag(:strong, "Number Title:") +
        number_field_tag("preview", "", placeholder: "42", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "date" => content_tag(:div) do
        content_tag(:strong, "Date Title:") +
        date_field_tag("preview", "", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "select" => content_tag(:div) do
        content_tag(:strong, "Select Title:") +
        select_tag("preview", options_for_select(["Option 1", "Option 2", "Option 3"]), class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "checkbox" => content_tag(:div) do
        content_tag(:strong, "Checkbox Title:") +
        content_tag(:div, class: "flex flex-col space-y-1 mt-1") do
          (1..3).map do |i|
            content_tag(:label, class: "flex items-center space-x-2") do
              check_box_tag("preview_#{i}") + content_tag(:span, "Option #{i}", class: "text-sm text-gray-700")
            end
          end.join.html_safe
        end
      end,

      "radio" => content_tag(:div) do
        content_tag(:strong, "Radio Title:") +
        content_tag(:div, class: "flex flex-col space-y-1 mt-1") do
          (1..3).map do |i|
            content_tag(:label, class: "flex items-center space-x-2") do
              radio_button_tag("preview_radio", "Option #{i}") + content_tag(:span, "Option #{i}", class: "text-sm text-gray-700")
            end
          end.join.html_safe
        end
      end,

      "textarea" => content_tag(:div) do
        content_tag(:strong, "Textarea Title:") +
        text_area_tag("preview", "", placeholder: "Your feedback here...", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "file" => content_tag(:div) do
        content_tag(:strong, "File Title:") +
        file_field_tag("preview", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "email" => content_tag(:div) do
        content_tag(:strong, "Email Title:") +
        email_field_tag("preview", "", placeholder: "you@example.com", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "url" => content_tag(:div) do
        content_tag(:strong, "URL Title:") +
        url_field_tag("preview", "", placeholder: "https://example.com", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end,

      "phone" => content_tag(:div) do
        content_tag(:strong, "Phone Title:") +
        telephone_field_tag("preview", "", placeholder: "+49 123 456789", class: "mt-1 block w-full rounded-md border-gray-300 shadow-sm")
      end
    } %>

    <div class="w-96 bg-gray-100 p-6 rounded-2xl shadow-lg overflow-y-auto">
      <h3 class="text-xl font-semibold mb-4">Available Fields</h3>
      <div class="space-y-2">
        <% Formfield.typefields.keys.each do |field_type| %>
          <div class="relative flex items-center justify-between bg-blue-100 hover:bg-blue-200 rounded px-4 py-2">
            <%= button_to "Add #{field_type.titleize}",
                  add_field_workflow_form_path(@workflow, @form, field_type: field_type),
                  method: :post,
                  class: "text-left flex-1" %>

            <div class="relative group ml-3">
              <button type="button"
                class="w-6 h-6 text-blue-700 bg-blue-200 rounded-full text-xs font-bold flex items-center justify-center hover:bg-blue-300 cursor-pointer"
                aria-label="Info about <%= field_type.titleize %>">
                ?
              </button>

              <span
                class="absolute top-full right-0 mt-2 w-56 p-3 rounded-lg z-50
                      bg-gray-200/90 text-gray-800 text-xs whitespace-pre-line
                      opacity-0 pointer-events-none shadow-lg backdrop-blur-sm
                      transition-opacity duration-200
                      group-hover:opacity-100 group-hover:pointer-events-auto"
              >
                <%= example_texts[field_type] %>
              </span>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  // Utility function to display flash messages (assuming you have a div for them)
  function showFlash(type, message) {
    const flashContainer = document.getElementById('flash-messages'); // Ensure you have this div in your layout
    if (flashContainer) {
      flashContainer.innerHTML = `<div class="mb-4 p-4 bg-${type}-100 border border-${type}-300 text-${type}-800 rounded">${message}</div>`;
    } else {
      console.log(`Flash ${type}: ${message}`); // Fallback if no flash container
    }
  }

  function enhanceFormField(formField) {
    const allowedTypes = ["select", "checkbox", "radio"];
    const getType = () => formField.querySelector("[data-typefield]")?.value?.trim().toLowerCase() || "";
    const toggleFields = () => {
      const type = getType();
      const isAllowed = allowedTypes.includes(type);
      const contentWrapper = formField.querySelector("[data-content-wrapper]");
      const contentInputs = formField.querySelectorAll("[data-content-fields] input");
      const addButton = formField.querySelector(".add-content-btn");

      if (contentWrapper) contentWrapper.style.display = isAllowed ? "block" : "none";
      contentInputs.forEach(input => input.disabled = !isAllowed);
      if (addButton) addButton.style.display = isAllowed ? "inline-block" : "none";
    };

    toggleFields();

    const addButton = formField.querySelector(".add-content-btn");
    if (addButton && !addButton.dataset.enhanced) {
      addButton.addEventListener("click", () => {
        const type = getType();
        if (!allowedTypes.includes(type)) return;

        const container = formField.querySelector("[data-content-fields]");
        const input = document.createElement("input");
        const name = container.querySelector("input")?.name || "form_field[content][]";

        input.name = name;
        input.type = "text";
        input.className = "mt-1 mb-2 w-full rounded-md border-gray-300 shadow-sm content-input";
        container.appendChild(input);
      });
      addButton.dataset.enhanced = "true"; // Prevent multiple bindings
    }
  }

  function updatePositions() {
    document.querySelectorAll("[data-formfield]").forEach((field, index) => {
      const posInput = field.querySelector(".form-position");
      if (posInput) posInput.value = index + 1;
    });
  }

  function initFieldControls() {
    document.querySelectorAll("[data-formfield]").forEach(field => {
      if (field.dataset.enhancedControls) return; // Skip if already handled

      const upBtn = field.querySelector(".move-up");
      const downBtn = field.querySelector(".move-down");

      upBtn?.addEventListener("click", () => {
        const allFields = Array.from(document.querySelectorAll("[data-formfield]"));
        const index = allFields.indexOf(field);
        const previousField = allFields[index - 1];
        if (previousField) {
          previousField.before(field);
          updatePositions();
        }
      });

      downBtn?.addEventListener("click", () => {
        const allFields = Array.from(document.querySelectorAll("[data-formfield]"));
        const index = allFields.indexOf(field);
        const nextField = allFields[index + 1];
        if (nextField) {
          nextField.after(field);
          updatePositions();
        }
      });

      field.dataset.enhancedControls = "true"; // Mark as processed
    });
  }

  // --- NEW DELETION LOGIC ---
  function initDeleteFieldButtons() {
    document.querySelectorAll(".delete-field-btn").forEach(button => {
      // Ensure the event listener is added only once
      if (button.dataset.deleteListenerAdded) return;

      button.addEventListener("click", async () => {
        const workflowId = button.dataset.workflowId;
        const formId = button.dataset.formId;
        const formFieldId = button.dataset.formfieldId;
        const fieldWrapper = button.closest("[data-formfield]");

        if (!workflowId || !formId || !formFieldId || !fieldWrapper) {
          console.error("Missing data attributes for field deletion.");
          return;
        }

        try {
          const response = await fetch(`/workflows/${workflowId}/forms/${formId}/destroy_field?field_id=${formFieldId}`, {
            method: 'DELETE',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content, // Get CSRF token
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            fieldWrapper.remove(); // Remove the field from the DOM
            updatePositions(); // Re-calculate positions after removal
            showFlash('green', 'Form field deleted successfully!');
          } else {
            const errorData = await response.json();
            showFlash('red', errorData.error || 'Failed to delete form field.');
            console.error('Failed to delete form field:', errorData);
          }
        } catch (error) {
          showFlash('red', 'An error occurred while deleting the field.');
          console.error('Error:', error);
        }
      });
      button.dataset.deleteListenerAdded = 'true'; // Mark listener as added
    });
  }
  // --- END NEW DELETION LOGIC ---

  function initFormFields() {
    document.querySelectorAll("[data-formfield]").forEach(enhanceFormField);
    initFieldControls();
    initDeleteFieldButtons(); // Call the new init function
  }

  document.addEventListener("DOMContentLoaded", initFormFields);
  document.addEventListener("turbo:load", initFormFields); // For Turbo/Hotwire
</script>